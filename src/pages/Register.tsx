import { useNavigate } from "react-router-dom";
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { PersonalInfoSection } from "@/components/registration/PersonalInfoSection";
import { NextOfKinSection } from "@/components/registration/NextOfKinSection";
import { SpousesSection } from "@/components/registration/SpousesSection";
import { DependantsSection } from "@/components/registration/DependantsSection";
import { MembershipSection } from "@/components/registration/MembershipSection";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { InfoIcon } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { useState } from "react";

const MAX_RETRIES = 3;
const INITIAL_RETRY_DELAY = 1000; // 1 second

export default function Register() {
  const navigate = useNavigate();
  const { toast } = useToast();
  const { register, handleSubmit, formState: { errors } } = useForm();
  const [selectedCollectorId, setSelectedCollectorId] = useState<string>("");
  const [isSubmitting, setIsSubmitting] = useState(false);

  const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

  const createMemberWithRetry = async (data: any, retryCount = 0): Promise<any> => {
    try {
      console.log(`Attempting to create member (attempt ${retryCount + 1}/${MAX_RETRIES})`);
      
      // First check if email already exists
      if (data.email) {
        const { data: existingMember } = await supabase
          .from('members')
          .select('id')
          .eq('email', data.email)
          .single();

        if (existingMember) {
          throw new Error('A member with this email already exists');
        }
      }

      // Attempt to create the member
      const { data: memberData, error: memberError } = await supabase
        .from('members')
        .insert({
          collector_id: selectedCollectorId,
          full_name: data.fullName,
          email: data.email,
          phone: data.mobile,
          address: data.address,
          town: data.town,
          postcode: data.postCode,
          date_of_birth: data.dob,
          gender: data.gender,
          marital_status: data.maritalStatus,
          status: 'pending',
          member_number: '', // This will be auto-generated by the trigger
        })
        .select()
        .single();

      if (memberError) {
        // Check if it's a duplicate member number error
        if (memberError.message?.includes('duplicate key value violates unique constraint') ||
            memberError.message?.includes('Could not generate unique member number')) {
          if (retryCount < MAX_RETRIES) {
            // Calculate exponential backoff with jitter
            const backoffDelay = INITIAL_RETRY_DELAY * Math.pow(2, retryCount) * (0.5 + Math.random());
            console.log(`Retrying after ${backoffDelay}ms delay...`);
            await delay(backoffDelay);
            return createMemberWithRetry(data, retryCount + 1);
          }
        }
        throw memberError;
      }

      return memberData;
    } catch (error) {
      if (retryCount < MAX_RETRIES) {
        const backoffDelay = INITIAL_RETRY_DELAY * Math.pow(2, retryCount) * (0.5 + Math.random());
        console.log(`Error occurred, retrying after ${backoffDelay}ms delay...`, error);
        await delay(backoffDelay);
        return createMemberWithRetry(data, retryCount + 1);
      }
      throw error;
    }
  };

  const onSubmit = async (data: any) => {
    if (!selectedCollectorId) {
      toast({
        title: "Registration failed",
        description: "Please select a collector",
        variant: "destructive",
      });
      return;
    }

    setIsSubmitting(true);
    try {
      console.log("Starting registration process with data:", { ...data, collectorId: selectedCollectorId });

      const memberData = await createMemberWithRetry(data);
      console.log("Member created:", memberData);

      // Create registration record
      const { error: registrationError } = await supabase
        .from('registrations')
        .insert({
          member_id: memberData.id,
          status: 'pending'
        });

      if (registrationError) {
        console.error("Registration creation error:", registrationError);
        throw registrationError;
      }

      toast({
        title: "Registration successful",
        description: "Your registration has been submitted and is pending approval.",
      });

      // Redirect to success page or login
      navigate("/login");
    } catch (error) {
      console.error("Registration error:", error);
      toast({
        title: "Registration failed",
        description: error instanceof Error ? error.message : "An error occurred during registration. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="container py-8 max-w-4xl mx-auto">
      <Card className="shadow-lg">
        <CardHeader className="bg-primary/5 border-b">
          <CardTitle className="text-2xl text-center text-primary">
            PWA Burton On Trent Registration Form
          </CardTitle>
        </CardHeader>
        <CardContent className="p-6">
          <Alert className="mb-6 bg-blue-50 border-blue-200">
            <InfoIcon className="h-4 w-4 text-blue-500" />
            <AlertDescription className="text-sm text-blue-700">
              Your personal information will be processed in accordance with our Privacy Policy and the GDPR.
              We collect this information to manage your membership and provide our services. Your data will be
              stored securely and will not be shared with third parties without your consent.
            </AlertDescription>
          </Alert>
          
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-8">
            <div className="space-y-8 divide-y divide-gray-200">
              <PersonalInfoSection register={register} />
              <NextOfKinSection />
              <SpousesSection />
              <DependantsSection />
              <MembershipSection onCollectorChange={setSelectedCollectorId} />
            </div>
            
            <div className="mt-8 pt-6 border-t">
              <Button 
                type="submit" 
                className="w-full bg-primary hover:bg-primary/90"
                disabled={isSubmitting}
              >
                {isSubmitting ? "Submitting..." : "Submit Registration"}
              </Button>
            </div>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}